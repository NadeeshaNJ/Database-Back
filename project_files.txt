HOTEL MANAGEMENT SYSTEM - BACKEND CODE
=====================================

This file contains all the source code from the backend project for sharing purposes.
Generated on: October 13, 2025

TABLE OF CONTENTS:
-----------------
1. Configuration Files
2. Models
3. Controllers
4. Routers
5. Middleware
6. Utils
7. Tests
8. Package Configuration

1. CONFIGURATION FILES
--------------------

database.js:
-----------
```javascript
const { Pool } = require('pg');
const { Sequelize } = require('sequelize');
require('dotenv').config();

// Configuration for raw SQL queries
const pool = new Pool({
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: process.env.DB_NAME || 'skynest',
    password: process.env.DB_PASSWORD || '',
    port: parseInt(process.env.DB_PORT || '5432'),
    ssl: process.env.DB_SSL === 'true' ? {
        rejectUnauthorized: false
    } : undefined
});

// Configuration for Sequelize ORM
const sequelize = new Sequelize(
    process.env.DB_NAME || 'skynest',
    process.env.DB_USER || 'postgres',
    process.env.DB_PASSWORD || '',
    {
        host: process.env.DB_HOST || 'localhost',
        dialect: 'postgres',
        port: parseInt(process.env.DB_PORT || '5432'),
        logging: process.env.NODE_ENV === 'development' ? console.log : false,
        pool: {
            max: 5,
            min: 0,
            acquire: 30000,
            idle: 10000
        },
        dialectOptions: {
            ssl: process.env.DB_SSL === 'true' ? {
                require: true,
                rejectUnauthorized: false
            } : false
        }
    }
);

// Test database connection
const testConnection = async () => {
    try {
        const client = await pool.connect();
        console.log(`
ðŸ“Š Database Connection Details:
   Host: ${process.env.DB_HOST}
   Port: ${process.env.DB_PORT}
   Database: ${process.env.DB_NAME}
   User: ${process.env.DB_USER}
   SSL: ${process.env.DB_SSL}
        `);
        const result = await client.query('SELECT version()');
        console.log('PostgreSQL Version:', result.rows[0].version);
        client.release();
        return true;
    } catch (error) {
        console.error('Unable to connect to PostgreSQL database:', error);
        throw error;
    }
};

// Execute Query Helper
const executeQuery = async (text, params = []) => {
    const client = await pool.connect();
    try {
        const result = await client.query(text, params);
        return result;
    } finally {
        client.release();
    }
};

// Transaction Helper
const executeTransaction = async (queries) => {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        const results = [];
        
        for (const query of queries) {
            const result = await client.query(query.text, query.params);
            results.push(result);
        }
        
        await client.query('COMMIT');
        return results;
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
};

module.exports = {
    pool,
    sequelize,
    executeQuery,
    executeTransaction,
    testConnection
};
```

2. MODELS
---------

guest.js:
--------
```javascript
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database').sequelize;

const Guest = sequelize.define('Guest', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  first_name: {
    type: DataTypes.STRING(50),
    allowNull: false
  },
  last_name: {
    type: DataTypes.STRING(50),
    allowNull: false
  },
  email: {
    type: DataTypes.STRING(100),
    allowNull: true,
    validate: {
      isEmail: true
    }
  },
  phone: {
    type: DataTypes.STRING(20),
    allowNull: true
  },
  address: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  city: {
    type: DataTypes.STRING(50),
    allowNull: true
  },
  country: {
    type: DataTypes.STRING(50),
    allowNull: true
  },
  date_of_birth: {
    type: DataTypes.DATE,
    allowNull: true
  },
  id_type: {
    type: DataTypes.ENUM('passport', 'national_id', 'drivers_license'),
    allowNull: true
  },
  id_number: {
    type: DataTypes.STRING(50),
    allowNull: true
  },
  preferences: {
    type: DataTypes.JSONB,
    defaultValue: {}
  }
}, {
  tableName: 'guests',
  timestamps: true,
  createdAt: 'created_at',
  updatedAt: 'updated_at'
});

module.exports = Guest;
```

room.js:
-------
```javascript
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database').sequelize;
const { ROOM_STATUS } = require('../utils/enums');

const Room = sequelize.define('Room', {
  room_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  room_type_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'room_types',
      key: 'room_type_id'
    }
  },
  room_number: {
    type: DataTypes.STRING(10),
    unique: true,
    allowNull: false,
    validate: {
      notEmpty: true
    }
  },
  status: {
    type: DataTypes.ENUM(...Object.values(ROOM_STATUS)),
    allowNull: false,
    defaultValue: ROOM_STATUS.AVAILABLE
  }
}, {
  tableName: 'rooms',
  timestamps: true
});

module.exports = Room;
```

3. CONTROLLERS
-------------

authcontroller.js:
----------------
```javascript
// ...existing code...
```

bookingcontroller.js:
-------------------
```javascript
// ...existing code...
```

4. ROUTERS
---------

auth.js:
-------
```javascript
// ...existing code...
```

booking.js:
---------
```javascript
// ...existing code...
```

5. MIDDLEWARE
------------

auth.js:
-------
```javascript
// ...existing code...
```

errorHandler.js:
--------------
```javascript
// ...existing code...
```

6. UTILS
-------

enums.js:
--------
```javascript
// ...existing code...
```

helper.js:
---------
```javascript
// ...existing code...
```

7. TESTS
-------

auth.test.js:
-----------
```javascript
// ...existing code...
```

bookings.test.js:
---------------
```javascript
// ...existing code...
```

8. PACKAGE CONFIGURATION
---------------------

package.json:
-----------
```json
{
  "name": "hotel-management-system",
  "version": "1.0.0",
  "description": "Backend code for the hotel management system.",
  "main": "index.js",
  "scripts": {
    "test": "jest",
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^17.0.1",
    "jsonwebtoken": "^8.5.1",
    "nodemailer": "^6.4.11",
    "pg": "^8.7.1",
    "sequelize": "^6.12.0",
    "express-async-errors": "^3.1.1"
  },
  "devDependencies": {
    "jest": "^27.0.6",
    "nodemon": "^3.1.9",
    "supertest": "^6.1.6"
  },
  "keywords": [
    "hotel",
    "management",
    "system",
    "backend",
    "api"
  ],
  "author": "Your Name",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yourusername/hotel-management-system.git"
  },
  "bugs": {
    "url": "https://github.com/yourusername/hotel-management-system/issues"
  },
  "homepage": "https://github.com/yourusername/hotel-management-system#readme"
}
```
